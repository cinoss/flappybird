// Generated by CoffeeScript 1.7.1
'use strict';
var MainCtrl, PipeManager, bird, config, flap, freePairs, onFrame, pipeMan, startTime, theta;

window.requestAnimateFrame = (function(callback) {
  return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
    return window.setTimeout(callback, 1000 / 60);
  };
})();

config = {};

config.pipe = {
  distance: 56,
  gap: 51,
  width: 28,
  topHeight: 11
};

config.stage = {
  g: 600,
  height: config.pipe.gap * 4,
  width: (config.pipe.distance + config.pipe.width) * 2
};

config.bird = {
  size: 15,
  screenX: config.pipe.distance
};

bird = {
  pos: {
    x: 0,
    x0: 0,
    y0: config.stage.height / 2,
    y: config.stage.height / 2
  },
  v: {
    x: 60,
    y: 0,
    y0: 180
  }
};

config.pixel = {
  size: 3
};

bird.radius = config.bird.size / 2;

$('#bird').css('height', (config.bird.size * config.pixel.size) + 'px');

$('#bird').css('width', (config.bird.size * config.pixel.size) + 'px');

$('#bird').css('left', (config.bird.screenX * config.pixel.size - bird.radius) + 'px');

$('.pipe').css('width', (config.pipe.width * config.pixel.size) + 'px');

$('.pipe').css('height', (config.stage.height * config.pixel.size) + 'px');

$('.pipe.up').css('top', (config.pipe.gap * config.pixel.size) + 'px');

$('.pipe.down').css('top', -1 * (config.stage.height * config.pixel.size) + 'px');

$('#stage').css('height', (config.stage.height * config.pixel.size) + 'px');

$('#stage').css('width', (config.stage.width * config.pixel.size) + 'px');

freePairs = $.makeArray($('.pair'));

PipeManager = (function() {
  function PipeManager(maxY, nextX, step, freePairs) {
    this.maxY = maxY;
    this.nextX = nextX;
    this.step = step;
    this.freePairs = freePairs;
    this.pipes = [];
  }

  PipeManager.prototype.genPipe = function() {
    var pipe;
    pipe = {
      y: Math.round(Math.random() * this.maxY),
      x: this.nextX,
      pair: this.freePairs.pop()
    };
    $("#" + pipe.pair.id).css('top', pipe.y * config.pixel.size);
    this.nextX += this.step;
    return pipe;
  };

  PipeManager.prototype.update = function(viewportX) {
    var pipe, _i, _len, _ref;
    while (this.freePairs.length > 0) {
      this.pipes.push(this.genPipe());
    }
    _ref = this.pipes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      pipe = _ref[_i];
      pipe.screenX = pipe.x - viewportX;
      $("#" + pipe.pair.id).css('left', pipe.screenX * config.pixel.size);
    }
    while (this.pipes.length > 0 && this.pipes[0].screenX < -config.pipe.width) {
      this.freePairs.push(this.pipes[0].pair);
      this.pipes.shift();
      break;
    }
  };

  return PipeManager;

})();

startTime = (new Date()).getTime();

theta = function(dx, dy) {
  var t;
  t = dy / (Math.abs(dx) + Math.abs(dy));
  if (t > 0) {
    return t * 90;
  } else {
    return 360 + t * 90;
  }
};

onFrame = function(repeat) {
  var angle, currentTime, lastTime, t;
  currentTime = (new Date()).getTime();
  t = (currentTime - startTime) / 1000;
  bird.pos.y = bird.pos.y0 + bird.v.y * t + 0.5 * config.stage.g * Math.pow(t, 2);
  bird.pos.x = bird.pos.x0 + bird.v.x * t;
  lastTime = currentTime;
  $('#bird').css('top', (bird.pos.y * config.pixel.size - bird.radius) + 'px');
  angle = theta(bird.v.x, bird.v.y + t * config.stage.g);
  console.log(Math.round(angle));
  pipeMan.update(bird.pos.x - config.bird.screenX);
  $('#bird').css('transform', "rotate(" + angle + "deg)");
  $('#bird').css('-ms-transform', "rotate(" + angle + "deg)");
  $('#bird').css('-webkit-transform', "rotate(" + angle + "deg)");
  if (repeat) {
    if (bird.pos.y > config.stage.height - bird.radius) {
      flap();
      bird.pos.y0 = config.stage.height - bird.radius;
    }
    requestAnimateFrame(function() {
      onFrame(true);
    });
  }
};

flap = function() {
  if (bird.pos.y > bird.radius) {
    onFrame(false);
    startTime = (new Date()).getTime();
    bird.pos.y0 = bird.pos.y;
    bird.pos.x0 = bird.pos.x;
    return bird.v.y = -bird.v.y0;
  }
};

$('#stage').mousedown(flap);

$(document).keydown(function(event) {
  return flap();
});

pipeMan = new PipeManager(2.2 * config.pipe.gap, 2 * config.stage.width, config.pipe.distance + config.pipe.width, freePairs);

requestAnimateFrame(function() {
  onFrame(true);
});

MainCtrl = function($scope, $timeout) {};
