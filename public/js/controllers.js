// Generated by CoffeeScript 1.7.1
'use strict';
var PipeManager, bird, config, flap, gameOver, muted, onFrame, onIntroFrame, ratio, reset, start, theta, updateSize;

window.requestAnimateFrame = (function(callback) {
  return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
    return window.setTimeout(callback, 1000 / 60);
  };
})();

config = {};

config.pixel = {
  size: 3
};

config.pipe = {
  distance: 56,
  gap: 51,
  width: 26,
  topHeight: 11,
  imgHeight: 140
};

config.stage = {
  g: 500,
  groundTileWidth: 12,
  buildingHeight: 33,
  cloudHeight: 13,
  height: config.pipe.gap * 4.5,
  width: 550 / config.pixel.size
};

config.bird = {
  size: 21,
  height: 16,
  width: 21,
  effectiveRadius: 12 / 2,
  screenX: config.pipe.distance,
  v: {
    x0: 80,
    y0: -180
  }
};

config.stage.gapMax = 1.7 * config.pipe.gap;

config.stage.groundY = config.stage.gapMax + (config.stage.height - config.stage.gapMax - config.pipe.gap) / 2 + config.pipe.gap + 2 * config.pipe.topHeight;

ratio = 1;

config.stage.g = 650 * ratio;

config.bird.v.x0 = 60 * ratio;

config.bird.v.x0 = config.pipe.distance * 1.5 * ratio;

config.bird.v.y0 = -195;

bird = {};

bird.alive = true;

bird.score = 0;

bird.pos = {
  x: 0,
  x0: 0,
  y0: config.stage.height / 2,
  y: config.stage.height / 2
};

bird.v = {
  x: config.bird.v.x0,
  y: 0
};

updateSize = function() {
  $('#bird').css('height', (config.bird.height * config.pixel.size) + 'px');
  $('#bird').css('width', (config.bird.width * config.pixel.size) + 'px');
  $('#bird').css('top', (config.stage.height * config.pixel.size) + 'px');
  $('#bird').css('left', ((config.bird.screenX - config.bird.width / 2) * config.pixel.size) + 'px');
  $('.pipe').css('width', (config.pipe.width * config.pixel.size) + 'px');
  $('.pipe').css('height', (config.stage.height * config.pixel.size) + 'px');
  $('.pipe.up').css('top', (config.pipe.gap * config.pixel.size) + 'px');
  $('.pipe.up').css('background-position', "0px " + (-config.pipe.imgHeight * config.pixel.size) + "px");
  $('.pipe.down').css('background-position', "0px " + ((config.stage.height - config.pipe.imgHeight) * config.pixel.size) + "px");
  $('.pipe.down').css('top', -1 * (config.stage.height * config.pixel.size) + 'px');
  $('#stage').css('border', config.pixel.size + 'px black solid');
  $('#stage').css('height', (config.stage.height * config.pixel.size) + 'px');
  $('#stage').css('width', (config.stage.width * config.pixel.size) + 'px');
  $('#ground').css('height', (2 * (config.stage.height - config.stage.groundY) * config.pixel.size) + 'px');
  $('#ground').css('width', (config.stage.width * config.pixel.size) + 'px');
  $('#ground').css('top', (config.stage.groundY * config.pixel.size) + 'px');
  $('#ground').css('background-size', (config.stage.groundTileWidth * config.pixel.size) + 'px auto');
  $('#buildings').css('height', (config.stage.buildingHeight * config.pixel.size) + 'px');
  $('#buildings').css('width', (config.stage.width * config.pixel.size) + 'px');
  $('#buildings').css('top', ((config.stage.groundY - config.stage.buildingHeight) * config.pixel.size) + 'px');
  $('#buildings').css('background-size', 'auto ' + (config.stage.buildingHeight * config.pixel.size) + 'px');
  $('#clouds').css('height', (config.stage.cloudHeight * config.pixel.size) + 'px');
  $('#clouds').css('width', (config.stage.width * config.pixel.size) + 'px');
  $('#clouds').css('top', ((config.stage.groundY - config.stage.buildingHeight - config.stage.cloudHeight) * config.pixel.size) + 'px');
  $('#clouds').css('background-size', 'auto ' + (config.stage.cloudHeight * config.pixel.size) + 'px');
  $('#score').css('width', (config.stage.width * config.pixel.size) + 'px');
  $('#score').css('top', ((config.stage.height - config.stage.groundY) * config.pixel.size) + 'px');
  $('#score').css('font-size', config.bird.size * config.pixel.size);
  $('#score').text(bird.score);
  $('#score').css('text-shadow', "-" + config.pixel.size + "px -" + config.pixel.size + "px 0 #000, " + config.pixel.size + "px -" + config.pixel.size + "px 0 #000, -" + config.pixel.size + "px " + config.pixel.size + "px 0 #000, " + config.pixel.size + "px " + config.pixel.size + "px 0 #000");
  $('.big-text').css('width', (config.stage.width * config.pixel.size) + 'px');
  $('.big-text').css('top', (2 * (config.stage.height - config.stage.groundY) * config.pixel.size) + 'px');
  $('.big-text').css('font-size', config.bird.size * config.pixel.size);
  $('#get-ready').css('display', 'inherit');
  $('#score').css('display', 'inherit');
  return $('#game-over').css('display', 'none');
};

PipeManager = (function() {
  function PipeManager(nextX, step, freePairs) {
    this.nextX = nextX;
    this.step = step;
    this.freePairs = freePairs;
    this.pipes = [];
  }

  PipeManager.prototype.genPipe = function() {
    var pipe;
    pipe = {
      y: Math.random() * config.stage.gapMax + (config.stage.height - config.stage.gapMax - config.pipe.gap) / 2,
      x: this.nextX,
      score: 1,
      pair: this.freePairs.pop()
    };
    $("#" + pipe.pair.id).css('top', pipe.y * config.pixel.size);
    this.nextX += this.step;
    return pipe;
  };

  PipeManager.prototype.update = function(viewportX) {
    var pipe, _i, _len, _ref;
    while (this.freePairs.length > 0) {
      this.pipes.push(this.genPipe());
    }
    _ref = this.pipes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      pipe = _ref[_i];
      pipe.screenX = pipe.x - viewportX;
      $("#" + pipe.pair.id).css('left', pipe.screenX * config.pixel.size);
    }
    while (this.pipes.length > 0 && this.pipes[0].screenX < -config.pipe.width) {
      this.freePairs.push(this.pipes[0].pair);
      this.pipes.shift();
      break;
    }
  };

  PipeManager.prototype.checkBird = function() {
    var pipe, _i, _len, _ref;
    _ref = this.pipes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      pipe = _ref[_i];
      if (bird.pos.y <= pipe.y) {
        if (bird.pos.x <= pipe.x + config.pipe.width + config.bird.effectiveRadius && bird.pos.x >= pipe.x - config.bird.effectiveRadius) {
          console.log('hit 1');
          return false;
        }
      }
      if (bird.pos.y >= pipe.y + config.pipe.gap) {
        if (bird.pos.x <= pipe.x + config.pipe.width + config.bird.effectiveRadius && bird.pos.x >= pipe.x - config.bird.effectiveRadius) {
          console.log('hit 2');
          return false;
        }
      }
      if (bird.pos.x <= pipe.x + config.pipe.width && bird.pos.x >= pipe.x) {
        if (bird.pos.y < pipe.y + config.bird.effectiveRadius) {
          console.log('hit 3');
          return false;
        }
        if (bird.pos.y > pipe.y + config.pipe.gap - config.bird.effectiveRadius) {
          console.log('hit 4');
          return false;
        }
      }
      if (bird.pos.x > pipe.x) {
        bird.score += pipe.score;
        pipe.score = 0;
      }
    }
    if (bird.pos.y >= config.stage.groundY - config.bird.effectiveRadius) {
      console.log('hit-ground');
      return false;
    }
    return true;
  };

  return PipeManager;

})();

theta = function(dx, dy) {
  var t;
  t = dy / (Math.abs(dx) + Math.abs(dy));
  if (t > 0) {
    return t * 90;
  } else {
    return 360 + t * 15;
  }
};

onIntroFrame = function() {
  var currentTime, groundState, t, wingState;
  console.log(window.status);
  if (status !== 'intro') {
    return;
  }
  currentTime = (new Date()).getTime();
  t = (currentTime - bigbang) / 1000;
  groundState = -(currentTime - bigbang) / 1000 * (config.bird.v.x0 * config.pixel.size);
  $('#ground').css('background-position', groundState + "px 0px");
  wingState = Math.round((currentTime - bigbang) / 150) % 3;
  $('#bird').css('background-position', "0px " + (wingState * config.bird.height * config.pixel.size) + "px");
  bird.pos.y = bird.pos.y0 + Math.sin(t * 5) * config.bird.effectiveRadius;
  $('#bird').css('top', ((bird.pos.y - config.bird.height / 2) * config.pixel.size) + 'px');
  requestAnimateFrame(function() {
    onIntroFrame();
  });
};

start = function() {
  var freePairs;
  window.startTime = (new Date()).getTime();
  console.log('start');
  console.log(startTime);
  $('#stage').off('mousedown');
  $(document).off('keydown');
  $('#stage').mousedown(flap);
  $(document).keydown(function(event) {
    event.preventDefault();
    return flap();
  });
  window.status = 'playing';
  freePairs = $.makeArray($('.pair'));
  $('.pair').css("left", -config.pipe.width * config.pixel.size);
  $('#get-ready').css('display', 'none');
  window.pipeMan = new PipeManager(1.5 * config.stage.width, config.pipe.distance + config.pipe.width, freePairs);
  flap();
  return requestAnimateFrame(function() {
    onFrame(true);
  });
};

reset = function() {
  updateSize();
  window.bigbang = (new Date()).getTime();
  window.bird.alive = true;
  window.bird.score = 0;
  window.bird.pos = {
    x: 0,
    x0: 0,
    y0: config.stage.height / 2,
    y: config.stage.height / 2
  };
  window.bird.v = {
    x: config.bird.v.x0,
    y: 0
  };
  $('#stage').mousedown(start);
  $(document).keydown(start);
  window.status = 'intro';
  console.log(window.status);
  console.log('111');
  return requestAnimateFrame(function() {
    onIntroFrame();
  });
};

onFrame = function(repeat) {
  var angle, currentTime, groundState, oldScore, t, wingState;
  currentTime = (new Date()).getTime();
  t = (currentTime - window.startTime) / 1000;
  bird.pos.y = bird.pos.y0 + bird.v.y * t + 0.5 * config.stage.g * Math.pow(t, 2);
  if (bird.pos.y > config.stage.groundY - config.bird.effectiveRadius) {
    bird.pos.y = config.stage.groundY - config.bird.effectiveRadius;
  }
  bird.pos.x = bird.pos.x0 + bird.v.x * t;
  $('#bird').css('top', ((bird.pos.y - config.bird.height / 2) * config.pixel.size) + 'px');
  pipeMan.update(bird.pos.x - config.bird.screenX);
  oldScore = bird.score;
  if (bird.alive && !pipeMan.checkBird()) {
    if (bird.pos.y < config.stage.groundY - config.bird.effectiveRadius) {
      if (!muted) {
        fallSound.play();
      }
      if (!muted) {
        hitSound.play();
      }
    }
    window.startTime = (new Date()).getTime();
    bird.alive = false;
    bird.v.x = 0;
    bird.pos.y0 = bird.pos.y;
    bird.pos.x0 = bird.pos.x;
    bird.v.y = config.bird.v.y0 / 2;
  }
  if (oldScore < bird.score) {
    $('#score').text(bird.score);
    if (!muted) {
      scoreSound.play();
    }
  }
  angle = theta(bird.v.x, bird.v.y + t * config.stage.g);
  $('#bird').css('transform', "rotate(" + angle + "deg)");
  $('#bird').css('-ms-transform', "rotate(" + angle + "deg)");
  $('#bird').css('-webkit-transform', "rotate(" + angle + "deg)");
  if (angle < 180 && angle > 44) {
    wingState = 2;
  } else {
    wingState = Math.round((currentTime - bigbang) / 60) % 3;
  }
  $('#bird').css('background-position', "0px " + (wingState * config.bird.height * config.pixel.size) + "px");
  if (bird.alive) {
    groundState = -(currentTime - bigbang) / 1000 * (config.bird.v.x0 * config.pixel.size);
    $('#ground').css('background-position', groundState + "px 0px");
  }
  if (repeat) {
    if (bird.alive || bird.pos.y < config.stage.groundY - config.bird.effectiveRadius) {
      requestAnimateFrame(function() {
        onFrame(true);
      });
    } else {
      window.status = 'gameover';
      gameOver();
    }
  }
};

flap = function() {
  if (bird.alive && bird.pos.y > config.bird.height / 2) {
    if (!muted) {
      flapSound.play();
    }
    onFrame(false);
    window.startTime = (new Date()).getTime();
    bird.pos.y0 = bird.pos.y;
    bird.pos.x0 = bird.pos.x;
    return bird.v.y = config.bird.v.y0;
  }
};

gameOver = function() {
  if (!muted) {
    hitSound.play();
  }
  $('#get-ready').css('display', 'none');
  $('#game-over').css('display', 'inherit');
  return $('#score').css('display', 'none');
};

reset();

muted = false;

soundManager.setup({
  url: '/lib/soundmanager2/soundmanager2.swf',
  onready: function() {
    window.flapSound = soundManager.createSound({
      url: '/audio/flap.mp3'
    });
    window.hitSound = soundManager.createSound({
      url: '/audio/hit.mp3'
    });
    window.fallSound = soundManager.createSound({
      url: '/audio/fall.mp3'
    });
    return window.scoreSound = soundManager.createSound({
      url: '/audio/score.mp3'
    });
  }
});
